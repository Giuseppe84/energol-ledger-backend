// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  //output          = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
   shadowDatabaseUrl = env("SHADOW_DATABASE_URL") 
}


// Modello User con collegamento a Role (relazione uno-a-molti)
// Enum per i ruoli, puoi espanderla
enum UserRole {
  ADMIN
  MANAGER
  USER
  GUEST // Se vuoi un ruolo per utenti non autenticati o con pochi privilegi
}

// Enum per i tipi di permesso (es. CRUD)
enum PermissionAction {
  CREATE
  READ
  UPDATE
  DELETE
}

// Stato di avanzamento del Work
enum WorkStatus {
  TO_START     // Da iniziare
  IN_PROGRESS  // In corso
  COMPLETED    // Concluso
  CANCELED     // Annullato
}

// Enum per le risorse su cui agiscono i permessi
enum PermissionResource {
  USER
  ROLE
  PERMISSION
  CLIENT
  PROPERTY
  SUBJECT
  WORK
  SERVICE
  PAYMENT
}

model Role {
  id          String           @id @default(uuid())
  name        String           @unique @db.VarChar(50)
  description String?          @db.VarChar(255)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  users       User[]
  permissions RolePermission[] // Relazione molti a molti con i permessi
}

model Permission {
  id          String             @id @default(uuid())
  action      PermissionAction
  resource    PermissionResource
  description String?            @db.VarChar(255)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  roles       RolePermission[] // Relazione molti a molti con i ruoli

  @@unique([action, resource]) // Un permesso è unico per azione e risorsa
}

// Tabella di join esplicita per la relazione molti a molti tra Role e Permission
model RolePermission {
  roleId       String
  permissionId String
  assignedAt   DateTime @default(now())

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

model User {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(255)
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roleId    String // Chiave esterna per il ruolo
  role      Role     @relation(fields: [roleId], references: [id])
  twoFactorEnabled Boolean @default(false)
  twoFactorSecret  String?


  works Work[] // Un utente può essere responsabile di più servizi
}

model Client {
  id         String     @id @default(cuid())
  taxId      String     @unique // Corresponds to "Codice Fiscale"
  vatNumber  String?    @unique // Corresponds to "Partita IVA"
  firstName  String
  lastName   String
  email      String     @unique
  phone      String?
  clientSubjects  ClientSubject[]
  
  works      Work[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

enum PaymentStatus {
  PENDING
  PARTIALLY_PAID
  PAID
  REFUNDED // Aggiunto per chiarezza, se applicabile
  NO_AMOUNT // Aggiunto per servizi senza importo definito
}

model Subject {
  id        String   @id @default(cuid())
  taxId     String   @unique // Corresponds to "Codice Fiscale"
  firstName String
  lastName  String
  clientSubjects  ClientSubject[]
  properties Property[]
  works     Work[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Property {
  id            String    @id @default(cuid())
  cadastralCode String    @unique // Corresponds to "Codice Catastale"
  address       String
  city          String
  subject       Subject    @relation(fields: [subjectId], references: [id])
  subjectId     String
  works         Work[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sheet           Int     // Foglio catastale
  parcel          Int     // Particella catastale
  subordinates    String  // Subalterni separati da virgole
  latitude        Float?
  longitude       Float?
  location        Bytes? @db.ByteA
}

model Service {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  works       Work[]
  amount      Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Work {
  id            String           @id @default(cuid())
  description   String
  acquisitionDate DateTime? // Data di acquisizione
  completionDate  DateTime? // Data di conclusione
  status WorkStatus @default(TO_START)
  amount        Float
  paymentStatus String?
  subject       Subject          @relation(fields: [subjectId], references: [id])
  subjectId     String
  client        Client           @relation(fields: [clientId], references: [id])
  clientId      String
  property      Property?        @relation(fields: [propertyId], references: [id])
  propertyId    String?
  service       Service          @relation(fields: [serviceId], references: [id])
  serviceId     String
  // Relazione molti-a-molti con Payment tramite WorkPayment
  workPayments  WorkPayment[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Payment {
  id            String        @id @default(cuid())
  date          DateTime
  amount        Float
  isRefund      Boolean
  status        String
  method        String // e.g., "Bank Transfer", "Cash", "Credit Card"
  // Relazione molti-a-molti con Work tramite WorkPayment
  workPayments  WorkPayment[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

// Tabella di collegamento per la relazione molti-a-molti tra Work e Payment
model WorkPayment {
  work     Work     @relation(fields: [workId], references: [id])
  workId   String
  payment  Payment  @relation(fields: [paymentId], references: [id])
  paymentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([workId, paymentId])
}

model ClientSubject {
  client    Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId  String
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId String
  createdAt DateTime @default(now())
  isSamePerson Boolean @default(false)

  @@id([clientId, subjectId])
}
