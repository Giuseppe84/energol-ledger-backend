
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ServicePayment` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ServicePayment
 * 
 */
export type ServicePaymentModel = runtime.Types.Result.DefaultSelection<Prisma.$ServicePaymentPayload>

export type AggregateServicePayment = {
  _count: ServicePaymentCountAggregateOutputType | null
  _min: ServicePaymentMinAggregateOutputType | null
  _max: ServicePaymentMaxAggregateOutputType | null
}

export type ServicePaymentMinAggregateOutputType = {
  serviceId: string | null
  paymentId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ServicePaymentMaxAggregateOutputType = {
  serviceId: string | null
  paymentId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ServicePaymentCountAggregateOutputType = {
  serviceId: number
  paymentId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ServicePaymentMinAggregateInputType = {
  serviceId?: true
  paymentId?: true
  createdAt?: true
  updatedAt?: true
}

export type ServicePaymentMaxAggregateInputType = {
  serviceId?: true
  paymentId?: true
  createdAt?: true
  updatedAt?: true
}

export type ServicePaymentCountAggregateInputType = {
  serviceId?: true
  paymentId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ServicePaymentAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ServicePayment to aggregate.
   */
  where?: Prisma.ServicePaymentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ServicePayments to fetch.
   */
  orderBy?: Prisma.ServicePaymentOrderByWithRelationInput | Prisma.ServicePaymentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ServicePaymentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ServicePayments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ServicePayments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ServicePayments
  **/
  _count?: true | ServicePaymentCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ServicePaymentMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ServicePaymentMaxAggregateInputType
}

export type GetServicePaymentAggregateType<T extends ServicePaymentAggregateArgs> = {
      [P in keyof T & keyof AggregateServicePayment]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateServicePayment[P]>
    : Prisma.GetScalarType<T[P], AggregateServicePayment[P]>
}




export type ServicePaymentGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ServicePaymentWhereInput
  orderBy?: Prisma.ServicePaymentOrderByWithAggregationInput | Prisma.ServicePaymentOrderByWithAggregationInput[]
  by: Prisma.ServicePaymentScalarFieldEnum[] | Prisma.ServicePaymentScalarFieldEnum
  having?: Prisma.ServicePaymentScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ServicePaymentCountAggregateInputType | true
  _min?: ServicePaymentMinAggregateInputType
  _max?: ServicePaymentMaxAggregateInputType
}

export type ServicePaymentGroupByOutputType = {
  serviceId: string
  paymentId: string
  createdAt: Date
  updatedAt: Date
  _count: ServicePaymentCountAggregateOutputType | null
  _min: ServicePaymentMinAggregateOutputType | null
  _max: ServicePaymentMaxAggregateOutputType | null
}

type GetServicePaymentGroupByPayload<T extends ServicePaymentGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ServicePaymentGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ServicePaymentGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ServicePaymentGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ServicePaymentGroupByOutputType[P]>
      }
    >
  > 



export type ServicePaymentWhereInput = {
  AND?: Prisma.ServicePaymentWhereInput | Prisma.ServicePaymentWhereInput[]
  OR?: Prisma.ServicePaymentWhereInput[]
  NOT?: Prisma.ServicePaymentWhereInput | Prisma.ServicePaymentWhereInput[]
  serviceId?: Prisma.StringFilter<"ServicePayment"> | string
  paymentId?: Prisma.StringFilter<"ServicePayment"> | string
  createdAt?: Prisma.DateTimeFilter<"ServicePayment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ServicePayment"> | Date | string
  service?: Prisma.XOR<Prisma.ServiceScalarRelationFilter, Prisma.ServiceWhereInput>
  payment?: Prisma.XOR<Prisma.PaymentScalarRelationFilter, Prisma.PaymentWhereInput>
}

export type ServicePaymentOrderByWithRelationInput = {
  serviceId?: Prisma.SortOrder
  paymentId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  service?: Prisma.ServiceOrderByWithRelationInput
  payment?: Prisma.PaymentOrderByWithRelationInput
}

export type ServicePaymentWhereUniqueInput = Prisma.AtLeast<{
  serviceId_paymentId?: Prisma.ServicePaymentServiceIdPaymentIdCompoundUniqueInput
  AND?: Prisma.ServicePaymentWhereInput | Prisma.ServicePaymentWhereInput[]
  OR?: Prisma.ServicePaymentWhereInput[]
  NOT?: Prisma.ServicePaymentWhereInput | Prisma.ServicePaymentWhereInput[]
  serviceId?: Prisma.StringFilter<"ServicePayment"> | string
  paymentId?: Prisma.StringFilter<"ServicePayment"> | string
  createdAt?: Prisma.DateTimeFilter<"ServicePayment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ServicePayment"> | Date | string
  service?: Prisma.XOR<Prisma.ServiceScalarRelationFilter, Prisma.ServiceWhereInput>
  payment?: Prisma.XOR<Prisma.PaymentScalarRelationFilter, Prisma.PaymentWhereInput>
}, "serviceId_paymentId">

export type ServicePaymentOrderByWithAggregationInput = {
  serviceId?: Prisma.SortOrder
  paymentId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ServicePaymentCountOrderByAggregateInput
  _max?: Prisma.ServicePaymentMaxOrderByAggregateInput
  _min?: Prisma.ServicePaymentMinOrderByAggregateInput
}

export type ServicePaymentScalarWhereWithAggregatesInput = {
  AND?: Prisma.ServicePaymentScalarWhereWithAggregatesInput | Prisma.ServicePaymentScalarWhereWithAggregatesInput[]
  OR?: Prisma.ServicePaymentScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ServicePaymentScalarWhereWithAggregatesInput | Prisma.ServicePaymentScalarWhereWithAggregatesInput[]
  serviceId?: Prisma.StringWithAggregatesFilter<"ServicePayment"> | string
  paymentId?: Prisma.StringWithAggregatesFilter<"ServicePayment"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ServicePayment"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ServicePayment"> | Date | string
}

export type ServicePaymentCreateInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  service: Prisma.ServiceCreateNestedOneWithoutServicePaymentsInput
  payment: Prisma.PaymentCreateNestedOneWithoutServicePaymentsInput
}

export type ServicePaymentUncheckedCreateInput = {
  serviceId: string
  paymentId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ServicePaymentUpdateInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  service?: Prisma.ServiceUpdateOneRequiredWithoutServicePaymentsNestedInput
  payment?: Prisma.PaymentUpdateOneRequiredWithoutServicePaymentsNestedInput
}

export type ServicePaymentUncheckedUpdateInput = {
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  paymentId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ServicePaymentCreateManyInput = {
  serviceId: string
  paymentId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ServicePaymentUpdateManyMutationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ServicePaymentUncheckedUpdateManyInput = {
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  paymentId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ServicePaymentListRelationFilter = {
  every?: Prisma.ServicePaymentWhereInput
  some?: Prisma.ServicePaymentWhereInput
  none?: Prisma.ServicePaymentWhereInput
}

export type ServicePaymentOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ServicePaymentServiceIdPaymentIdCompoundUniqueInput = {
  serviceId: string
  paymentId: string
}

export type ServicePaymentCountOrderByAggregateInput = {
  serviceId?: Prisma.SortOrder
  paymentId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ServicePaymentMaxOrderByAggregateInput = {
  serviceId?: Prisma.SortOrder
  paymentId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ServicePaymentMinOrderByAggregateInput = {
  serviceId?: Prisma.SortOrder
  paymentId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ServicePaymentCreateNestedManyWithoutServiceInput = {
  create?: Prisma.XOR<Prisma.ServicePaymentCreateWithoutServiceInput, Prisma.ServicePaymentUncheckedCreateWithoutServiceInput> | Prisma.ServicePaymentCreateWithoutServiceInput[] | Prisma.ServicePaymentUncheckedCreateWithoutServiceInput[]
  connectOrCreate?: Prisma.ServicePaymentCreateOrConnectWithoutServiceInput | Prisma.ServicePaymentCreateOrConnectWithoutServiceInput[]
  createMany?: Prisma.ServicePaymentCreateManyServiceInputEnvelope
  connect?: Prisma.ServicePaymentWhereUniqueInput | Prisma.ServicePaymentWhereUniqueInput[]
}

export type ServicePaymentUncheckedCreateNestedManyWithoutServiceInput = {
  create?: Prisma.XOR<Prisma.ServicePaymentCreateWithoutServiceInput, Prisma.ServicePaymentUncheckedCreateWithoutServiceInput> | Prisma.ServicePaymentCreateWithoutServiceInput[] | Prisma.ServicePaymentUncheckedCreateWithoutServiceInput[]
  connectOrCreate?: Prisma.ServicePaymentCreateOrConnectWithoutServiceInput | Prisma.ServicePaymentCreateOrConnectWithoutServiceInput[]
  createMany?: Prisma.ServicePaymentCreateManyServiceInputEnvelope
  connect?: Prisma.ServicePaymentWhereUniqueInput | Prisma.ServicePaymentWhereUniqueInput[]
}

export type ServicePaymentUpdateManyWithoutServiceNestedInput = {
  create?: Prisma.XOR<Prisma.ServicePaymentCreateWithoutServiceInput, Prisma.ServicePaymentUncheckedCreateWithoutServiceInput> | Prisma.ServicePaymentCreateWithoutServiceInput[] | Prisma.ServicePaymentUncheckedCreateWithoutServiceInput[]
  connectOrCreate?: Prisma.ServicePaymentCreateOrConnectWithoutServiceInput | Prisma.ServicePaymentCreateOrConnectWithoutServiceInput[]
  upsert?: Prisma.ServicePaymentUpsertWithWhereUniqueWithoutServiceInput | Prisma.ServicePaymentUpsertWithWhereUniqueWithoutServiceInput[]
  createMany?: Prisma.ServicePaymentCreateManyServiceInputEnvelope
  set?: Prisma.ServicePaymentWhereUniqueInput | Prisma.ServicePaymentWhereUniqueInput[]
  disconnect?: Prisma.ServicePaymentWhereUniqueInput | Prisma.ServicePaymentWhereUniqueInput[]
  delete?: Prisma.ServicePaymentWhereUniqueInput | Prisma.ServicePaymentWhereUniqueInput[]
  connect?: Prisma.ServicePaymentWhereUniqueInput | Prisma.ServicePaymentWhereUniqueInput[]
  update?: Prisma.ServicePaymentUpdateWithWhereUniqueWithoutServiceInput | Prisma.ServicePaymentUpdateWithWhereUniqueWithoutServiceInput[]
  updateMany?: Prisma.ServicePaymentUpdateManyWithWhereWithoutServiceInput | Prisma.ServicePaymentUpdateManyWithWhereWithoutServiceInput[]
  deleteMany?: Prisma.ServicePaymentScalarWhereInput | Prisma.ServicePaymentScalarWhereInput[]
}

export type ServicePaymentUncheckedUpdateManyWithoutServiceNestedInput = {
  create?: Prisma.XOR<Prisma.ServicePaymentCreateWithoutServiceInput, Prisma.ServicePaymentUncheckedCreateWithoutServiceInput> | Prisma.ServicePaymentCreateWithoutServiceInput[] | Prisma.ServicePaymentUncheckedCreateWithoutServiceInput[]
  connectOrCreate?: Prisma.ServicePaymentCreateOrConnectWithoutServiceInput | Prisma.ServicePaymentCreateOrConnectWithoutServiceInput[]
  upsert?: Prisma.ServicePaymentUpsertWithWhereUniqueWithoutServiceInput | Prisma.ServicePaymentUpsertWithWhereUniqueWithoutServiceInput[]
  createMany?: Prisma.ServicePaymentCreateManyServiceInputEnvelope
  set?: Prisma.ServicePaymentWhereUniqueInput | Prisma.ServicePaymentWhereUniqueInput[]
  disconnect?: Prisma.ServicePaymentWhereUniqueInput | Prisma.ServicePaymentWhereUniqueInput[]
  delete?: Prisma.ServicePaymentWhereUniqueInput | Prisma.ServicePaymentWhereUniqueInput[]
  connect?: Prisma.ServicePaymentWhereUniqueInput | Prisma.ServicePaymentWhereUniqueInput[]
  update?: Prisma.ServicePaymentUpdateWithWhereUniqueWithoutServiceInput | Prisma.ServicePaymentUpdateWithWhereUniqueWithoutServiceInput[]
  updateMany?: Prisma.ServicePaymentUpdateManyWithWhereWithoutServiceInput | Prisma.ServicePaymentUpdateManyWithWhereWithoutServiceInput[]
  deleteMany?: Prisma.ServicePaymentScalarWhereInput | Prisma.ServicePaymentScalarWhereInput[]
}

export type ServicePaymentCreateNestedManyWithoutPaymentInput = {
  create?: Prisma.XOR<Prisma.ServicePaymentCreateWithoutPaymentInput, Prisma.ServicePaymentUncheckedCreateWithoutPaymentInput> | Prisma.ServicePaymentCreateWithoutPaymentInput[] | Prisma.ServicePaymentUncheckedCreateWithoutPaymentInput[]
  connectOrCreate?: Prisma.ServicePaymentCreateOrConnectWithoutPaymentInput | Prisma.ServicePaymentCreateOrConnectWithoutPaymentInput[]
  createMany?: Prisma.ServicePaymentCreateManyPaymentInputEnvelope
  connect?: Prisma.ServicePaymentWhereUniqueInput | Prisma.ServicePaymentWhereUniqueInput[]
}

export type ServicePaymentUncheckedCreateNestedManyWithoutPaymentInput = {
  create?: Prisma.XOR<Prisma.ServicePaymentCreateWithoutPaymentInput, Prisma.ServicePaymentUncheckedCreateWithoutPaymentInput> | Prisma.ServicePaymentCreateWithoutPaymentInput[] | Prisma.ServicePaymentUncheckedCreateWithoutPaymentInput[]
  connectOrCreate?: Prisma.ServicePaymentCreateOrConnectWithoutPaymentInput | Prisma.ServicePaymentCreateOrConnectWithoutPaymentInput[]
  createMany?: Prisma.ServicePaymentCreateManyPaymentInputEnvelope
  connect?: Prisma.ServicePaymentWhereUniqueInput | Prisma.ServicePaymentWhereUniqueInput[]
}

export type ServicePaymentUpdateManyWithoutPaymentNestedInput = {
  create?: Prisma.XOR<Prisma.ServicePaymentCreateWithoutPaymentInput, Prisma.ServicePaymentUncheckedCreateWithoutPaymentInput> | Prisma.ServicePaymentCreateWithoutPaymentInput[] | Prisma.ServicePaymentUncheckedCreateWithoutPaymentInput[]
  connectOrCreate?: Prisma.ServicePaymentCreateOrConnectWithoutPaymentInput | Prisma.ServicePaymentCreateOrConnectWithoutPaymentInput[]
  upsert?: Prisma.ServicePaymentUpsertWithWhereUniqueWithoutPaymentInput | Prisma.ServicePaymentUpsertWithWhereUniqueWithoutPaymentInput[]
  createMany?: Prisma.ServicePaymentCreateManyPaymentInputEnvelope
  set?: Prisma.ServicePaymentWhereUniqueInput | Prisma.ServicePaymentWhereUniqueInput[]
  disconnect?: Prisma.ServicePaymentWhereUniqueInput | Prisma.ServicePaymentWhereUniqueInput[]
  delete?: Prisma.ServicePaymentWhereUniqueInput | Prisma.ServicePaymentWhereUniqueInput[]
  connect?: Prisma.ServicePaymentWhereUniqueInput | Prisma.ServicePaymentWhereUniqueInput[]
  update?: Prisma.ServicePaymentUpdateWithWhereUniqueWithoutPaymentInput | Prisma.ServicePaymentUpdateWithWhereUniqueWithoutPaymentInput[]
  updateMany?: Prisma.ServicePaymentUpdateManyWithWhereWithoutPaymentInput | Prisma.ServicePaymentUpdateManyWithWhereWithoutPaymentInput[]
  deleteMany?: Prisma.ServicePaymentScalarWhereInput | Prisma.ServicePaymentScalarWhereInput[]
}

export type ServicePaymentUncheckedUpdateManyWithoutPaymentNestedInput = {
  create?: Prisma.XOR<Prisma.ServicePaymentCreateWithoutPaymentInput, Prisma.ServicePaymentUncheckedCreateWithoutPaymentInput> | Prisma.ServicePaymentCreateWithoutPaymentInput[] | Prisma.ServicePaymentUncheckedCreateWithoutPaymentInput[]
  connectOrCreate?: Prisma.ServicePaymentCreateOrConnectWithoutPaymentInput | Prisma.ServicePaymentCreateOrConnectWithoutPaymentInput[]
  upsert?: Prisma.ServicePaymentUpsertWithWhereUniqueWithoutPaymentInput | Prisma.ServicePaymentUpsertWithWhereUniqueWithoutPaymentInput[]
  createMany?: Prisma.ServicePaymentCreateManyPaymentInputEnvelope
  set?: Prisma.ServicePaymentWhereUniqueInput | Prisma.ServicePaymentWhereUniqueInput[]
  disconnect?: Prisma.ServicePaymentWhereUniqueInput | Prisma.ServicePaymentWhereUniqueInput[]
  delete?: Prisma.ServicePaymentWhereUniqueInput | Prisma.ServicePaymentWhereUniqueInput[]
  connect?: Prisma.ServicePaymentWhereUniqueInput | Prisma.ServicePaymentWhereUniqueInput[]
  update?: Prisma.ServicePaymentUpdateWithWhereUniqueWithoutPaymentInput | Prisma.ServicePaymentUpdateWithWhereUniqueWithoutPaymentInput[]
  updateMany?: Prisma.ServicePaymentUpdateManyWithWhereWithoutPaymentInput | Prisma.ServicePaymentUpdateManyWithWhereWithoutPaymentInput[]
  deleteMany?: Prisma.ServicePaymentScalarWhereInput | Prisma.ServicePaymentScalarWhereInput[]
}

export type ServicePaymentCreateWithoutServiceInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  payment: Prisma.PaymentCreateNestedOneWithoutServicePaymentsInput
}

export type ServicePaymentUncheckedCreateWithoutServiceInput = {
  paymentId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ServicePaymentCreateOrConnectWithoutServiceInput = {
  where: Prisma.ServicePaymentWhereUniqueInput
  create: Prisma.XOR<Prisma.ServicePaymentCreateWithoutServiceInput, Prisma.ServicePaymentUncheckedCreateWithoutServiceInput>
}

export type ServicePaymentCreateManyServiceInputEnvelope = {
  data: Prisma.ServicePaymentCreateManyServiceInput | Prisma.ServicePaymentCreateManyServiceInput[]
  skipDuplicates?: boolean
}

export type ServicePaymentUpsertWithWhereUniqueWithoutServiceInput = {
  where: Prisma.ServicePaymentWhereUniqueInput
  update: Prisma.XOR<Prisma.ServicePaymentUpdateWithoutServiceInput, Prisma.ServicePaymentUncheckedUpdateWithoutServiceInput>
  create: Prisma.XOR<Prisma.ServicePaymentCreateWithoutServiceInput, Prisma.ServicePaymentUncheckedCreateWithoutServiceInput>
}

export type ServicePaymentUpdateWithWhereUniqueWithoutServiceInput = {
  where: Prisma.ServicePaymentWhereUniqueInput
  data: Prisma.XOR<Prisma.ServicePaymentUpdateWithoutServiceInput, Prisma.ServicePaymentUncheckedUpdateWithoutServiceInput>
}

export type ServicePaymentUpdateManyWithWhereWithoutServiceInput = {
  where: Prisma.ServicePaymentScalarWhereInput
  data: Prisma.XOR<Prisma.ServicePaymentUpdateManyMutationInput, Prisma.ServicePaymentUncheckedUpdateManyWithoutServiceInput>
}

export type ServicePaymentScalarWhereInput = {
  AND?: Prisma.ServicePaymentScalarWhereInput | Prisma.ServicePaymentScalarWhereInput[]
  OR?: Prisma.ServicePaymentScalarWhereInput[]
  NOT?: Prisma.ServicePaymentScalarWhereInput | Prisma.ServicePaymentScalarWhereInput[]
  serviceId?: Prisma.StringFilter<"ServicePayment"> | string
  paymentId?: Prisma.StringFilter<"ServicePayment"> | string
  createdAt?: Prisma.DateTimeFilter<"ServicePayment"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ServicePayment"> | Date | string
}

export type ServicePaymentCreateWithoutPaymentInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  service: Prisma.ServiceCreateNestedOneWithoutServicePaymentsInput
}

export type ServicePaymentUncheckedCreateWithoutPaymentInput = {
  serviceId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ServicePaymentCreateOrConnectWithoutPaymentInput = {
  where: Prisma.ServicePaymentWhereUniqueInput
  create: Prisma.XOR<Prisma.ServicePaymentCreateWithoutPaymentInput, Prisma.ServicePaymentUncheckedCreateWithoutPaymentInput>
}

export type ServicePaymentCreateManyPaymentInputEnvelope = {
  data: Prisma.ServicePaymentCreateManyPaymentInput | Prisma.ServicePaymentCreateManyPaymentInput[]
  skipDuplicates?: boolean
}

export type ServicePaymentUpsertWithWhereUniqueWithoutPaymentInput = {
  where: Prisma.ServicePaymentWhereUniqueInput
  update: Prisma.XOR<Prisma.ServicePaymentUpdateWithoutPaymentInput, Prisma.ServicePaymentUncheckedUpdateWithoutPaymentInput>
  create: Prisma.XOR<Prisma.ServicePaymentCreateWithoutPaymentInput, Prisma.ServicePaymentUncheckedCreateWithoutPaymentInput>
}

export type ServicePaymentUpdateWithWhereUniqueWithoutPaymentInput = {
  where: Prisma.ServicePaymentWhereUniqueInput
  data: Prisma.XOR<Prisma.ServicePaymentUpdateWithoutPaymentInput, Prisma.ServicePaymentUncheckedUpdateWithoutPaymentInput>
}

export type ServicePaymentUpdateManyWithWhereWithoutPaymentInput = {
  where: Prisma.ServicePaymentScalarWhereInput
  data: Prisma.XOR<Prisma.ServicePaymentUpdateManyMutationInput, Prisma.ServicePaymentUncheckedUpdateManyWithoutPaymentInput>
}

export type ServicePaymentCreateManyServiceInput = {
  paymentId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ServicePaymentUpdateWithoutServiceInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  payment?: Prisma.PaymentUpdateOneRequiredWithoutServicePaymentsNestedInput
}

export type ServicePaymentUncheckedUpdateWithoutServiceInput = {
  paymentId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ServicePaymentUncheckedUpdateManyWithoutServiceInput = {
  paymentId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ServicePaymentCreateManyPaymentInput = {
  serviceId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ServicePaymentUpdateWithoutPaymentInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  service?: Prisma.ServiceUpdateOneRequiredWithoutServicePaymentsNestedInput
}

export type ServicePaymentUncheckedUpdateWithoutPaymentInput = {
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ServicePaymentUncheckedUpdateManyWithoutPaymentInput = {
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ServicePaymentSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  serviceId?: boolean
  paymentId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  service?: boolean | Prisma.ServiceDefaultArgs<ExtArgs>
  payment?: boolean | Prisma.PaymentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["servicePayment"]>

export type ServicePaymentSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  serviceId?: boolean
  paymentId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  service?: boolean | Prisma.ServiceDefaultArgs<ExtArgs>
  payment?: boolean | Prisma.PaymentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["servicePayment"]>

export type ServicePaymentSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  serviceId?: boolean
  paymentId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  service?: boolean | Prisma.ServiceDefaultArgs<ExtArgs>
  payment?: boolean | Prisma.PaymentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["servicePayment"]>

export type ServicePaymentSelectScalar = {
  serviceId?: boolean
  paymentId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ServicePaymentOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"serviceId" | "paymentId" | "createdAt" | "updatedAt", ExtArgs["result"]["servicePayment"]>
export type ServicePaymentInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  service?: boolean | Prisma.ServiceDefaultArgs<ExtArgs>
  payment?: boolean | Prisma.PaymentDefaultArgs<ExtArgs>
}
export type ServicePaymentIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  service?: boolean | Prisma.ServiceDefaultArgs<ExtArgs>
  payment?: boolean | Prisma.PaymentDefaultArgs<ExtArgs>
}
export type ServicePaymentIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  service?: boolean | Prisma.ServiceDefaultArgs<ExtArgs>
  payment?: boolean | Prisma.PaymentDefaultArgs<ExtArgs>
}

export type $ServicePaymentPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ServicePayment"
  objects: {
    service: Prisma.$ServicePayload<ExtArgs>
    payment: Prisma.$PaymentPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    serviceId: string
    paymentId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["servicePayment"]>
  composites: {}
}

export type ServicePaymentGetPayload<S extends boolean | null | undefined | ServicePaymentDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ServicePaymentPayload, S>

export type ServicePaymentCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ServicePaymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ServicePaymentCountAggregateInputType | true
  }

export interface ServicePaymentDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ServicePayment'], meta: { name: 'ServicePayment' } }
  /**
   * Find zero or one ServicePayment that matches the filter.
   * @param {ServicePaymentFindUniqueArgs} args - Arguments to find a ServicePayment
   * @example
   * // Get one ServicePayment
   * const servicePayment = await prisma.servicePayment.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ServicePaymentFindUniqueArgs>(args: Prisma.SelectSubset<T, ServicePaymentFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ServicePaymentClient<runtime.Types.Result.GetResult<Prisma.$ServicePaymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ServicePayment that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ServicePaymentFindUniqueOrThrowArgs} args - Arguments to find a ServicePayment
   * @example
   * // Get one ServicePayment
   * const servicePayment = await prisma.servicePayment.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ServicePaymentFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ServicePaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ServicePaymentClient<runtime.Types.Result.GetResult<Prisma.$ServicePaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ServicePayment that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServicePaymentFindFirstArgs} args - Arguments to find a ServicePayment
   * @example
   * // Get one ServicePayment
   * const servicePayment = await prisma.servicePayment.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ServicePaymentFindFirstArgs>(args?: Prisma.SelectSubset<T, ServicePaymentFindFirstArgs<ExtArgs>>): Prisma.Prisma__ServicePaymentClient<runtime.Types.Result.GetResult<Prisma.$ServicePaymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ServicePayment that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServicePaymentFindFirstOrThrowArgs} args - Arguments to find a ServicePayment
   * @example
   * // Get one ServicePayment
   * const servicePayment = await prisma.servicePayment.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ServicePaymentFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ServicePaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ServicePaymentClient<runtime.Types.Result.GetResult<Prisma.$ServicePaymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ServicePayments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServicePaymentFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ServicePayments
   * const servicePayments = await prisma.servicePayment.findMany()
   * 
   * // Get first 10 ServicePayments
   * const servicePayments = await prisma.servicePayment.findMany({ take: 10 })
   * 
   * // Only select the `serviceId`
   * const servicePaymentWithServiceIdOnly = await prisma.servicePayment.findMany({ select: { serviceId: true } })
   * 
   */
  findMany<T extends ServicePaymentFindManyArgs>(args?: Prisma.SelectSubset<T, ServicePaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ServicePaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ServicePayment.
   * @param {ServicePaymentCreateArgs} args - Arguments to create a ServicePayment.
   * @example
   * // Create one ServicePayment
   * const ServicePayment = await prisma.servicePayment.create({
   *   data: {
   *     // ... data to create a ServicePayment
   *   }
   * })
   * 
   */
  create<T extends ServicePaymentCreateArgs>(args: Prisma.SelectSubset<T, ServicePaymentCreateArgs<ExtArgs>>): Prisma.Prisma__ServicePaymentClient<runtime.Types.Result.GetResult<Prisma.$ServicePaymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ServicePayments.
   * @param {ServicePaymentCreateManyArgs} args - Arguments to create many ServicePayments.
   * @example
   * // Create many ServicePayments
   * const servicePayment = await prisma.servicePayment.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ServicePaymentCreateManyArgs>(args?: Prisma.SelectSubset<T, ServicePaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ServicePayments and returns the data saved in the database.
   * @param {ServicePaymentCreateManyAndReturnArgs} args - Arguments to create many ServicePayments.
   * @example
   * // Create many ServicePayments
   * const servicePayment = await prisma.servicePayment.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ServicePayments and only return the `serviceId`
   * const servicePaymentWithServiceIdOnly = await prisma.servicePayment.createManyAndReturn({
   *   select: { serviceId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ServicePaymentCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ServicePaymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ServicePaymentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ServicePayment.
   * @param {ServicePaymentDeleteArgs} args - Arguments to delete one ServicePayment.
   * @example
   * // Delete one ServicePayment
   * const ServicePayment = await prisma.servicePayment.delete({
   *   where: {
   *     // ... filter to delete one ServicePayment
   *   }
   * })
   * 
   */
  delete<T extends ServicePaymentDeleteArgs>(args: Prisma.SelectSubset<T, ServicePaymentDeleteArgs<ExtArgs>>): Prisma.Prisma__ServicePaymentClient<runtime.Types.Result.GetResult<Prisma.$ServicePaymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ServicePayment.
   * @param {ServicePaymentUpdateArgs} args - Arguments to update one ServicePayment.
   * @example
   * // Update one ServicePayment
   * const servicePayment = await prisma.servicePayment.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ServicePaymentUpdateArgs>(args: Prisma.SelectSubset<T, ServicePaymentUpdateArgs<ExtArgs>>): Prisma.Prisma__ServicePaymentClient<runtime.Types.Result.GetResult<Prisma.$ServicePaymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ServicePayments.
   * @param {ServicePaymentDeleteManyArgs} args - Arguments to filter ServicePayments to delete.
   * @example
   * // Delete a few ServicePayments
   * const { count } = await prisma.servicePayment.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ServicePaymentDeleteManyArgs>(args?: Prisma.SelectSubset<T, ServicePaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ServicePayments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServicePaymentUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ServicePayments
   * const servicePayment = await prisma.servicePayment.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ServicePaymentUpdateManyArgs>(args: Prisma.SelectSubset<T, ServicePaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ServicePayments and returns the data updated in the database.
   * @param {ServicePaymentUpdateManyAndReturnArgs} args - Arguments to update many ServicePayments.
   * @example
   * // Update many ServicePayments
   * const servicePayment = await prisma.servicePayment.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ServicePayments and only return the `serviceId`
   * const servicePaymentWithServiceIdOnly = await prisma.servicePayment.updateManyAndReturn({
   *   select: { serviceId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ServicePaymentUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ServicePaymentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ServicePaymentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ServicePayment.
   * @param {ServicePaymentUpsertArgs} args - Arguments to update or create a ServicePayment.
   * @example
   * // Update or create a ServicePayment
   * const servicePayment = await prisma.servicePayment.upsert({
   *   create: {
   *     // ... data to create a ServicePayment
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ServicePayment we want to update
   *   }
   * })
   */
  upsert<T extends ServicePaymentUpsertArgs>(args: Prisma.SelectSubset<T, ServicePaymentUpsertArgs<ExtArgs>>): Prisma.Prisma__ServicePaymentClient<runtime.Types.Result.GetResult<Prisma.$ServicePaymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ServicePayments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServicePaymentCountArgs} args - Arguments to filter ServicePayments to count.
   * @example
   * // Count the number of ServicePayments
   * const count = await prisma.servicePayment.count({
   *   where: {
   *     // ... the filter for the ServicePayments we want to count
   *   }
   * })
  **/
  count<T extends ServicePaymentCountArgs>(
    args?: Prisma.Subset<T, ServicePaymentCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ServicePaymentCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ServicePayment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServicePaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ServicePaymentAggregateArgs>(args: Prisma.Subset<T, ServicePaymentAggregateArgs>): Prisma.PrismaPromise<GetServicePaymentAggregateType<T>>

  /**
   * Group by ServicePayment.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServicePaymentGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ServicePaymentGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ServicePaymentGroupByArgs['orderBy'] }
      : { orderBy?: ServicePaymentGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ServicePaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServicePaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ServicePayment model
 */
readonly fields: ServicePaymentFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ServicePayment.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ServicePaymentClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  service<T extends Prisma.ServiceDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ServiceDefaultArgs<ExtArgs>>): Prisma.Prisma__ServiceClient<runtime.Types.Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  payment<T extends Prisma.PaymentDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PaymentDefaultArgs<ExtArgs>>): Prisma.Prisma__PaymentClient<runtime.Types.Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ServicePayment model
 */
export interface ServicePaymentFieldRefs {
  readonly serviceId: Prisma.FieldRef<"ServicePayment", 'String'>
  readonly paymentId: Prisma.FieldRef<"ServicePayment", 'String'>
  readonly createdAt: Prisma.FieldRef<"ServicePayment", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ServicePayment", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ServicePayment findUnique
 */
export type ServicePaymentFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServicePayment
   */
  select?: Prisma.ServicePaymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServicePayment
   */
  omit?: Prisma.ServicePaymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServicePaymentInclude<ExtArgs> | null
  /**
   * Filter, which ServicePayment to fetch.
   */
  where: Prisma.ServicePaymentWhereUniqueInput
}

/**
 * ServicePayment findUniqueOrThrow
 */
export type ServicePaymentFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServicePayment
   */
  select?: Prisma.ServicePaymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServicePayment
   */
  omit?: Prisma.ServicePaymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServicePaymentInclude<ExtArgs> | null
  /**
   * Filter, which ServicePayment to fetch.
   */
  where: Prisma.ServicePaymentWhereUniqueInput
}

/**
 * ServicePayment findFirst
 */
export type ServicePaymentFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServicePayment
   */
  select?: Prisma.ServicePaymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServicePayment
   */
  omit?: Prisma.ServicePaymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServicePaymentInclude<ExtArgs> | null
  /**
   * Filter, which ServicePayment to fetch.
   */
  where?: Prisma.ServicePaymentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ServicePayments to fetch.
   */
  orderBy?: Prisma.ServicePaymentOrderByWithRelationInput | Prisma.ServicePaymentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ServicePayments.
   */
  cursor?: Prisma.ServicePaymentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ServicePayments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ServicePayments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ServicePayments.
   */
  distinct?: Prisma.ServicePaymentScalarFieldEnum | Prisma.ServicePaymentScalarFieldEnum[]
}

/**
 * ServicePayment findFirstOrThrow
 */
export type ServicePaymentFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServicePayment
   */
  select?: Prisma.ServicePaymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServicePayment
   */
  omit?: Prisma.ServicePaymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServicePaymentInclude<ExtArgs> | null
  /**
   * Filter, which ServicePayment to fetch.
   */
  where?: Prisma.ServicePaymentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ServicePayments to fetch.
   */
  orderBy?: Prisma.ServicePaymentOrderByWithRelationInput | Prisma.ServicePaymentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ServicePayments.
   */
  cursor?: Prisma.ServicePaymentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ServicePayments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ServicePayments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ServicePayments.
   */
  distinct?: Prisma.ServicePaymentScalarFieldEnum | Prisma.ServicePaymentScalarFieldEnum[]
}

/**
 * ServicePayment findMany
 */
export type ServicePaymentFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServicePayment
   */
  select?: Prisma.ServicePaymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServicePayment
   */
  omit?: Prisma.ServicePaymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServicePaymentInclude<ExtArgs> | null
  /**
   * Filter, which ServicePayments to fetch.
   */
  where?: Prisma.ServicePaymentWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ServicePayments to fetch.
   */
  orderBy?: Prisma.ServicePaymentOrderByWithRelationInput | Prisma.ServicePaymentOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ServicePayments.
   */
  cursor?: Prisma.ServicePaymentWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ServicePayments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ServicePayments.
   */
  skip?: number
  distinct?: Prisma.ServicePaymentScalarFieldEnum | Prisma.ServicePaymentScalarFieldEnum[]
}

/**
 * ServicePayment create
 */
export type ServicePaymentCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServicePayment
   */
  select?: Prisma.ServicePaymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServicePayment
   */
  omit?: Prisma.ServicePaymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServicePaymentInclude<ExtArgs> | null
  /**
   * The data needed to create a ServicePayment.
   */
  data: Prisma.XOR<Prisma.ServicePaymentCreateInput, Prisma.ServicePaymentUncheckedCreateInput>
}

/**
 * ServicePayment createMany
 */
export type ServicePaymentCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ServicePayments.
   */
  data: Prisma.ServicePaymentCreateManyInput | Prisma.ServicePaymentCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ServicePayment createManyAndReturn
 */
export type ServicePaymentCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServicePayment
   */
  select?: Prisma.ServicePaymentSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ServicePayment
   */
  omit?: Prisma.ServicePaymentOmit<ExtArgs> | null
  /**
   * The data used to create many ServicePayments.
   */
  data: Prisma.ServicePaymentCreateManyInput | Prisma.ServicePaymentCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServicePaymentIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ServicePayment update
 */
export type ServicePaymentUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServicePayment
   */
  select?: Prisma.ServicePaymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServicePayment
   */
  omit?: Prisma.ServicePaymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServicePaymentInclude<ExtArgs> | null
  /**
   * The data needed to update a ServicePayment.
   */
  data: Prisma.XOR<Prisma.ServicePaymentUpdateInput, Prisma.ServicePaymentUncheckedUpdateInput>
  /**
   * Choose, which ServicePayment to update.
   */
  where: Prisma.ServicePaymentWhereUniqueInput
}

/**
 * ServicePayment updateMany
 */
export type ServicePaymentUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ServicePayments.
   */
  data: Prisma.XOR<Prisma.ServicePaymentUpdateManyMutationInput, Prisma.ServicePaymentUncheckedUpdateManyInput>
  /**
   * Filter which ServicePayments to update
   */
  where?: Prisma.ServicePaymentWhereInput
  /**
   * Limit how many ServicePayments to update.
   */
  limit?: number
}

/**
 * ServicePayment updateManyAndReturn
 */
export type ServicePaymentUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServicePayment
   */
  select?: Prisma.ServicePaymentSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ServicePayment
   */
  omit?: Prisma.ServicePaymentOmit<ExtArgs> | null
  /**
   * The data used to update ServicePayments.
   */
  data: Prisma.XOR<Prisma.ServicePaymentUpdateManyMutationInput, Prisma.ServicePaymentUncheckedUpdateManyInput>
  /**
   * Filter which ServicePayments to update
   */
  where?: Prisma.ServicePaymentWhereInput
  /**
   * Limit how many ServicePayments to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServicePaymentIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ServicePayment upsert
 */
export type ServicePaymentUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServicePayment
   */
  select?: Prisma.ServicePaymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServicePayment
   */
  omit?: Prisma.ServicePaymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServicePaymentInclude<ExtArgs> | null
  /**
   * The filter to search for the ServicePayment to update in case it exists.
   */
  where: Prisma.ServicePaymentWhereUniqueInput
  /**
   * In case the ServicePayment found by the `where` argument doesn't exist, create a new ServicePayment with this data.
   */
  create: Prisma.XOR<Prisma.ServicePaymentCreateInput, Prisma.ServicePaymentUncheckedCreateInput>
  /**
   * In case the ServicePayment was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ServicePaymentUpdateInput, Prisma.ServicePaymentUncheckedUpdateInput>
}

/**
 * ServicePayment delete
 */
export type ServicePaymentDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServicePayment
   */
  select?: Prisma.ServicePaymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServicePayment
   */
  omit?: Prisma.ServicePaymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServicePaymentInclude<ExtArgs> | null
  /**
   * Filter which ServicePayment to delete.
   */
  where: Prisma.ServicePaymentWhereUniqueInput
}

/**
 * ServicePayment deleteMany
 */
export type ServicePaymentDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ServicePayments to delete
   */
  where?: Prisma.ServicePaymentWhereInput
  /**
   * Limit how many ServicePayments to delete.
   */
  limit?: number
}

/**
 * ServicePayment without action
 */
export type ServicePaymentDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServicePayment
   */
  select?: Prisma.ServicePaymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServicePayment
   */
  omit?: Prisma.ServicePaymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServicePaymentInclude<ExtArgs> | null
}
