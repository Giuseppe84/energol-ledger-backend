
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Property` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Property
 * 
 */
export type PropertyModel = runtime.Types.Result.DefaultSelection<Prisma.$PropertyPayload>

export type AggregateProperty = {
  _count: PropertyCountAggregateOutputType | null
  _min: PropertyMinAggregateOutputType | null
  _max: PropertyMaxAggregateOutputType | null
}

export type PropertyMinAggregateOutputType = {
  id: string | null
  cadastralCode: string | null
  address: string | null
  city: string | null
  clientId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PropertyMaxAggregateOutputType = {
  id: string | null
  cadastralCode: string | null
  address: string | null
  city: string | null
  clientId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PropertyCountAggregateOutputType = {
  id: number
  cadastralCode: number
  address: number
  city: number
  clientId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type PropertyMinAggregateInputType = {
  id?: true
  cadastralCode?: true
  address?: true
  city?: true
  clientId?: true
  createdAt?: true
  updatedAt?: true
}

export type PropertyMaxAggregateInputType = {
  id?: true
  cadastralCode?: true
  address?: true
  city?: true
  clientId?: true
  createdAt?: true
  updatedAt?: true
}

export type PropertyCountAggregateInputType = {
  id?: true
  cadastralCode?: true
  address?: true
  city?: true
  clientId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type PropertyAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Property to aggregate.
   */
  where?: Prisma.PropertyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Properties to fetch.
   */
  orderBy?: Prisma.PropertyOrderByWithRelationInput | Prisma.PropertyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PropertyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Properties from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Properties.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Properties
  **/
  _count?: true | PropertyCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PropertyMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PropertyMaxAggregateInputType
}

export type GetPropertyAggregateType<T extends PropertyAggregateArgs> = {
      [P in keyof T & keyof AggregateProperty]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProperty[P]>
    : Prisma.GetScalarType<T[P], AggregateProperty[P]>
}




export type PropertyGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PropertyWhereInput
  orderBy?: Prisma.PropertyOrderByWithAggregationInput | Prisma.PropertyOrderByWithAggregationInput[]
  by: Prisma.PropertyScalarFieldEnum[] | Prisma.PropertyScalarFieldEnum
  having?: Prisma.PropertyScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PropertyCountAggregateInputType | true
  _min?: PropertyMinAggregateInputType
  _max?: PropertyMaxAggregateInputType
}

export type PropertyGroupByOutputType = {
  id: string
  cadastralCode: string
  address: string
  city: string
  clientId: string
  createdAt: Date
  updatedAt: Date
  _count: PropertyCountAggregateOutputType | null
  _min: PropertyMinAggregateOutputType | null
  _max: PropertyMaxAggregateOutputType | null
}

type GetPropertyGroupByPayload<T extends PropertyGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PropertyGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PropertyGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PropertyGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PropertyGroupByOutputType[P]>
      }
    >
  > 



export type PropertyWhereInput = {
  AND?: Prisma.PropertyWhereInput | Prisma.PropertyWhereInput[]
  OR?: Prisma.PropertyWhereInput[]
  NOT?: Prisma.PropertyWhereInput | Prisma.PropertyWhereInput[]
  id?: Prisma.StringFilter<"Property"> | string
  cadastralCode?: Prisma.StringFilter<"Property"> | string
  address?: Prisma.StringFilter<"Property"> | string
  city?: Prisma.StringFilter<"Property"> | string
  clientId?: Prisma.StringFilter<"Property"> | string
  createdAt?: Prisma.DateTimeFilter<"Property"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Property"> | Date | string
  client?: Prisma.XOR<Prisma.ClientScalarRelationFilter, Prisma.ClientWhereInput>
  services?: Prisma.ServiceListRelationFilter
}

export type PropertyOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  cadastralCode?: Prisma.SortOrder
  address?: Prisma.SortOrder
  city?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  client?: Prisma.ClientOrderByWithRelationInput
  services?: Prisma.ServiceOrderByRelationAggregateInput
}

export type PropertyWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  cadastralCode?: string
  AND?: Prisma.PropertyWhereInput | Prisma.PropertyWhereInput[]
  OR?: Prisma.PropertyWhereInput[]
  NOT?: Prisma.PropertyWhereInput | Prisma.PropertyWhereInput[]
  address?: Prisma.StringFilter<"Property"> | string
  city?: Prisma.StringFilter<"Property"> | string
  clientId?: Prisma.StringFilter<"Property"> | string
  createdAt?: Prisma.DateTimeFilter<"Property"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Property"> | Date | string
  client?: Prisma.XOR<Prisma.ClientScalarRelationFilter, Prisma.ClientWhereInput>
  services?: Prisma.ServiceListRelationFilter
}, "id" | "cadastralCode">

export type PropertyOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  cadastralCode?: Prisma.SortOrder
  address?: Prisma.SortOrder
  city?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.PropertyCountOrderByAggregateInput
  _max?: Prisma.PropertyMaxOrderByAggregateInput
  _min?: Prisma.PropertyMinOrderByAggregateInput
}

export type PropertyScalarWhereWithAggregatesInput = {
  AND?: Prisma.PropertyScalarWhereWithAggregatesInput | Prisma.PropertyScalarWhereWithAggregatesInput[]
  OR?: Prisma.PropertyScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PropertyScalarWhereWithAggregatesInput | Prisma.PropertyScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Property"> | string
  cadastralCode?: Prisma.StringWithAggregatesFilter<"Property"> | string
  address?: Prisma.StringWithAggregatesFilter<"Property"> | string
  city?: Prisma.StringWithAggregatesFilter<"Property"> | string
  clientId?: Prisma.StringWithAggregatesFilter<"Property"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Property"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Property"> | Date | string
}

export type PropertyCreateInput = {
  id?: string
  cadastralCode: string
  address: string
  city: string
  createdAt?: Date | string
  updatedAt?: Date | string
  client: Prisma.ClientCreateNestedOneWithoutPropertiesInput
  services?: Prisma.ServiceCreateNestedManyWithoutPropertyInput
}

export type PropertyUncheckedCreateInput = {
  id?: string
  cadastralCode: string
  address: string
  city: string
  clientId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  services?: Prisma.ServiceUncheckedCreateNestedManyWithoutPropertyInput
}

export type PropertyUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  cadastralCode?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  city?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  client?: Prisma.ClientUpdateOneRequiredWithoutPropertiesNestedInput
  services?: Prisma.ServiceUpdateManyWithoutPropertyNestedInput
}

export type PropertyUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  cadastralCode?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  city?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  services?: Prisma.ServiceUncheckedUpdateManyWithoutPropertyNestedInput
}

export type PropertyCreateManyInput = {
  id?: string
  cadastralCode: string
  address: string
  city: string
  clientId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PropertyUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  cadastralCode?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  city?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PropertyUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  cadastralCode?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  city?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PropertyListRelationFilter = {
  every?: Prisma.PropertyWhereInput
  some?: Prisma.PropertyWhereInput
  none?: Prisma.PropertyWhereInput
}

export type PropertyOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PropertyCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  cadastralCode?: Prisma.SortOrder
  address?: Prisma.SortOrder
  city?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PropertyMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  cadastralCode?: Prisma.SortOrder
  address?: Prisma.SortOrder
  city?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PropertyMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  cadastralCode?: Prisma.SortOrder
  address?: Prisma.SortOrder
  city?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PropertyNullableScalarRelationFilter = {
  is?: Prisma.PropertyWhereInput | null
  isNot?: Prisma.PropertyWhereInput | null
}

export type PropertyCreateNestedManyWithoutClientInput = {
  create?: Prisma.XOR<Prisma.PropertyCreateWithoutClientInput, Prisma.PropertyUncheckedCreateWithoutClientInput> | Prisma.PropertyCreateWithoutClientInput[] | Prisma.PropertyUncheckedCreateWithoutClientInput[]
  connectOrCreate?: Prisma.PropertyCreateOrConnectWithoutClientInput | Prisma.PropertyCreateOrConnectWithoutClientInput[]
  createMany?: Prisma.PropertyCreateManyClientInputEnvelope
  connect?: Prisma.PropertyWhereUniqueInput | Prisma.PropertyWhereUniqueInput[]
}

export type PropertyUncheckedCreateNestedManyWithoutClientInput = {
  create?: Prisma.XOR<Prisma.PropertyCreateWithoutClientInput, Prisma.PropertyUncheckedCreateWithoutClientInput> | Prisma.PropertyCreateWithoutClientInput[] | Prisma.PropertyUncheckedCreateWithoutClientInput[]
  connectOrCreate?: Prisma.PropertyCreateOrConnectWithoutClientInput | Prisma.PropertyCreateOrConnectWithoutClientInput[]
  createMany?: Prisma.PropertyCreateManyClientInputEnvelope
  connect?: Prisma.PropertyWhereUniqueInput | Prisma.PropertyWhereUniqueInput[]
}

export type PropertyUpdateManyWithoutClientNestedInput = {
  create?: Prisma.XOR<Prisma.PropertyCreateWithoutClientInput, Prisma.PropertyUncheckedCreateWithoutClientInput> | Prisma.PropertyCreateWithoutClientInput[] | Prisma.PropertyUncheckedCreateWithoutClientInput[]
  connectOrCreate?: Prisma.PropertyCreateOrConnectWithoutClientInput | Prisma.PropertyCreateOrConnectWithoutClientInput[]
  upsert?: Prisma.PropertyUpsertWithWhereUniqueWithoutClientInput | Prisma.PropertyUpsertWithWhereUniqueWithoutClientInput[]
  createMany?: Prisma.PropertyCreateManyClientInputEnvelope
  set?: Prisma.PropertyWhereUniqueInput | Prisma.PropertyWhereUniqueInput[]
  disconnect?: Prisma.PropertyWhereUniqueInput | Prisma.PropertyWhereUniqueInput[]
  delete?: Prisma.PropertyWhereUniqueInput | Prisma.PropertyWhereUniqueInput[]
  connect?: Prisma.PropertyWhereUniqueInput | Prisma.PropertyWhereUniqueInput[]
  update?: Prisma.PropertyUpdateWithWhereUniqueWithoutClientInput | Prisma.PropertyUpdateWithWhereUniqueWithoutClientInput[]
  updateMany?: Prisma.PropertyUpdateManyWithWhereWithoutClientInput | Prisma.PropertyUpdateManyWithWhereWithoutClientInput[]
  deleteMany?: Prisma.PropertyScalarWhereInput | Prisma.PropertyScalarWhereInput[]
}

export type PropertyUncheckedUpdateManyWithoutClientNestedInput = {
  create?: Prisma.XOR<Prisma.PropertyCreateWithoutClientInput, Prisma.PropertyUncheckedCreateWithoutClientInput> | Prisma.PropertyCreateWithoutClientInput[] | Prisma.PropertyUncheckedCreateWithoutClientInput[]
  connectOrCreate?: Prisma.PropertyCreateOrConnectWithoutClientInput | Prisma.PropertyCreateOrConnectWithoutClientInput[]
  upsert?: Prisma.PropertyUpsertWithWhereUniqueWithoutClientInput | Prisma.PropertyUpsertWithWhereUniqueWithoutClientInput[]
  createMany?: Prisma.PropertyCreateManyClientInputEnvelope
  set?: Prisma.PropertyWhereUniqueInput | Prisma.PropertyWhereUniqueInput[]
  disconnect?: Prisma.PropertyWhereUniqueInput | Prisma.PropertyWhereUniqueInput[]
  delete?: Prisma.PropertyWhereUniqueInput | Prisma.PropertyWhereUniqueInput[]
  connect?: Prisma.PropertyWhereUniqueInput | Prisma.PropertyWhereUniqueInput[]
  update?: Prisma.PropertyUpdateWithWhereUniqueWithoutClientInput | Prisma.PropertyUpdateWithWhereUniqueWithoutClientInput[]
  updateMany?: Prisma.PropertyUpdateManyWithWhereWithoutClientInput | Prisma.PropertyUpdateManyWithWhereWithoutClientInput[]
  deleteMany?: Prisma.PropertyScalarWhereInput | Prisma.PropertyScalarWhereInput[]
}

export type PropertyCreateNestedOneWithoutServicesInput = {
  create?: Prisma.XOR<Prisma.PropertyCreateWithoutServicesInput, Prisma.PropertyUncheckedCreateWithoutServicesInput>
  connectOrCreate?: Prisma.PropertyCreateOrConnectWithoutServicesInput
  connect?: Prisma.PropertyWhereUniqueInput
}

export type PropertyUpdateOneWithoutServicesNestedInput = {
  create?: Prisma.XOR<Prisma.PropertyCreateWithoutServicesInput, Prisma.PropertyUncheckedCreateWithoutServicesInput>
  connectOrCreate?: Prisma.PropertyCreateOrConnectWithoutServicesInput
  upsert?: Prisma.PropertyUpsertWithoutServicesInput
  disconnect?: Prisma.PropertyWhereInput | boolean
  delete?: Prisma.PropertyWhereInput | boolean
  connect?: Prisma.PropertyWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PropertyUpdateToOneWithWhereWithoutServicesInput, Prisma.PropertyUpdateWithoutServicesInput>, Prisma.PropertyUncheckedUpdateWithoutServicesInput>
}

export type PropertyCreateWithoutClientInput = {
  id?: string
  cadastralCode: string
  address: string
  city: string
  createdAt?: Date | string
  updatedAt?: Date | string
  services?: Prisma.ServiceCreateNestedManyWithoutPropertyInput
}

export type PropertyUncheckedCreateWithoutClientInput = {
  id?: string
  cadastralCode: string
  address: string
  city: string
  createdAt?: Date | string
  updatedAt?: Date | string
  services?: Prisma.ServiceUncheckedCreateNestedManyWithoutPropertyInput
}

export type PropertyCreateOrConnectWithoutClientInput = {
  where: Prisma.PropertyWhereUniqueInput
  create: Prisma.XOR<Prisma.PropertyCreateWithoutClientInput, Prisma.PropertyUncheckedCreateWithoutClientInput>
}

export type PropertyCreateManyClientInputEnvelope = {
  data: Prisma.PropertyCreateManyClientInput | Prisma.PropertyCreateManyClientInput[]
  skipDuplicates?: boolean
}

export type PropertyUpsertWithWhereUniqueWithoutClientInput = {
  where: Prisma.PropertyWhereUniqueInput
  update: Prisma.XOR<Prisma.PropertyUpdateWithoutClientInput, Prisma.PropertyUncheckedUpdateWithoutClientInput>
  create: Prisma.XOR<Prisma.PropertyCreateWithoutClientInput, Prisma.PropertyUncheckedCreateWithoutClientInput>
}

export type PropertyUpdateWithWhereUniqueWithoutClientInput = {
  where: Prisma.PropertyWhereUniqueInput
  data: Prisma.XOR<Prisma.PropertyUpdateWithoutClientInput, Prisma.PropertyUncheckedUpdateWithoutClientInput>
}

export type PropertyUpdateManyWithWhereWithoutClientInput = {
  where: Prisma.PropertyScalarWhereInput
  data: Prisma.XOR<Prisma.PropertyUpdateManyMutationInput, Prisma.PropertyUncheckedUpdateManyWithoutClientInput>
}

export type PropertyScalarWhereInput = {
  AND?: Prisma.PropertyScalarWhereInput | Prisma.PropertyScalarWhereInput[]
  OR?: Prisma.PropertyScalarWhereInput[]
  NOT?: Prisma.PropertyScalarWhereInput | Prisma.PropertyScalarWhereInput[]
  id?: Prisma.StringFilter<"Property"> | string
  cadastralCode?: Prisma.StringFilter<"Property"> | string
  address?: Prisma.StringFilter<"Property"> | string
  city?: Prisma.StringFilter<"Property"> | string
  clientId?: Prisma.StringFilter<"Property"> | string
  createdAt?: Prisma.DateTimeFilter<"Property"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Property"> | Date | string
}

export type PropertyCreateWithoutServicesInput = {
  id?: string
  cadastralCode: string
  address: string
  city: string
  createdAt?: Date | string
  updatedAt?: Date | string
  client: Prisma.ClientCreateNestedOneWithoutPropertiesInput
}

export type PropertyUncheckedCreateWithoutServicesInput = {
  id?: string
  cadastralCode: string
  address: string
  city: string
  clientId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PropertyCreateOrConnectWithoutServicesInput = {
  where: Prisma.PropertyWhereUniqueInput
  create: Prisma.XOR<Prisma.PropertyCreateWithoutServicesInput, Prisma.PropertyUncheckedCreateWithoutServicesInput>
}

export type PropertyUpsertWithoutServicesInput = {
  update: Prisma.XOR<Prisma.PropertyUpdateWithoutServicesInput, Prisma.PropertyUncheckedUpdateWithoutServicesInput>
  create: Prisma.XOR<Prisma.PropertyCreateWithoutServicesInput, Prisma.PropertyUncheckedCreateWithoutServicesInput>
  where?: Prisma.PropertyWhereInput
}

export type PropertyUpdateToOneWithWhereWithoutServicesInput = {
  where?: Prisma.PropertyWhereInput
  data: Prisma.XOR<Prisma.PropertyUpdateWithoutServicesInput, Prisma.PropertyUncheckedUpdateWithoutServicesInput>
}

export type PropertyUpdateWithoutServicesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  cadastralCode?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  city?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  client?: Prisma.ClientUpdateOneRequiredWithoutPropertiesNestedInput
}

export type PropertyUncheckedUpdateWithoutServicesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  cadastralCode?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  city?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PropertyCreateManyClientInput = {
  id?: string
  cadastralCode: string
  address: string
  city: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PropertyUpdateWithoutClientInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  cadastralCode?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  city?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  services?: Prisma.ServiceUpdateManyWithoutPropertyNestedInput
}

export type PropertyUncheckedUpdateWithoutClientInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  cadastralCode?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  city?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  services?: Prisma.ServiceUncheckedUpdateManyWithoutPropertyNestedInput
}

export type PropertyUncheckedUpdateManyWithoutClientInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  cadastralCode?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  city?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type PropertyCountOutputType
 */

export type PropertyCountOutputType = {
  services: number
}

export type PropertyCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  services?: boolean | PropertyCountOutputTypeCountServicesArgs
}

/**
 * PropertyCountOutputType without action
 */
export type PropertyCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PropertyCountOutputType
   */
  select?: Prisma.PropertyCountOutputTypeSelect<ExtArgs> | null
}

/**
 * PropertyCountOutputType without action
 */
export type PropertyCountOutputTypeCountServicesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ServiceWhereInput
}


export type PropertySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  cadastralCode?: boolean
  address?: boolean
  city?: boolean
  clientId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  client?: boolean | Prisma.ClientDefaultArgs<ExtArgs>
  services?: boolean | Prisma.Property$servicesArgs<ExtArgs>
  _count?: boolean | Prisma.PropertyCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["property"]>

export type PropertySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  cadastralCode?: boolean
  address?: boolean
  city?: boolean
  clientId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  client?: boolean | Prisma.ClientDefaultArgs<ExtArgs>
}, ExtArgs["result"]["property"]>

export type PropertySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  cadastralCode?: boolean
  address?: boolean
  city?: boolean
  clientId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  client?: boolean | Prisma.ClientDefaultArgs<ExtArgs>
}, ExtArgs["result"]["property"]>

export type PropertySelectScalar = {
  id?: boolean
  cadastralCode?: boolean
  address?: boolean
  city?: boolean
  clientId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type PropertyOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "cadastralCode" | "address" | "city" | "clientId" | "createdAt" | "updatedAt", ExtArgs["result"]["property"]>
export type PropertyInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  client?: boolean | Prisma.ClientDefaultArgs<ExtArgs>
  services?: boolean | Prisma.Property$servicesArgs<ExtArgs>
  _count?: boolean | Prisma.PropertyCountOutputTypeDefaultArgs<ExtArgs>
}
export type PropertyIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  client?: boolean | Prisma.ClientDefaultArgs<ExtArgs>
}
export type PropertyIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  client?: boolean | Prisma.ClientDefaultArgs<ExtArgs>
}

export type $PropertyPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Property"
  objects: {
    client: Prisma.$ClientPayload<ExtArgs>
    services: Prisma.$ServicePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    cadastralCode: string
    address: string
    city: string
    clientId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["property"]>
  composites: {}
}

export type PropertyGetPayload<S extends boolean | null | undefined | PropertyDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PropertyPayload, S>

export type PropertyCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PropertyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PropertyCountAggregateInputType | true
  }

export interface PropertyDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Property'], meta: { name: 'Property' } }
  /**
   * Find zero or one Property that matches the filter.
   * @param {PropertyFindUniqueArgs} args - Arguments to find a Property
   * @example
   * // Get one Property
   * const property = await prisma.property.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PropertyFindUniqueArgs>(args: Prisma.SelectSubset<T, PropertyFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PropertyClient<runtime.Types.Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Property that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PropertyFindUniqueOrThrowArgs} args - Arguments to find a Property
   * @example
   * // Get one Property
   * const property = await prisma.property.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PropertyFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PropertyFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PropertyClient<runtime.Types.Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Property that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PropertyFindFirstArgs} args - Arguments to find a Property
   * @example
   * // Get one Property
   * const property = await prisma.property.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PropertyFindFirstArgs>(args?: Prisma.SelectSubset<T, PropertyFindFirstArgs<ExtArgs>>): Prisma.Prisma__PropertyClient<runtime.Types.Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Property that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PropertyFindFirstOrThrowArgs} args - Arguments to find a Property
   * @example
   * // Get one Property
   * const property = await prisma.property.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PropertyFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PropertyFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PropertyClient<runtime.Types.Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Properties that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PropertyFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Properties
   * const properties = await prisma.property.findMany()
   * 
   * // Get first 10 Properties
   * const properties = await prisma.property.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const propertyWithIdOnly = await prisma.property.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PropertyFindManyArgs>(args?: Prisma.SelectSubset<T, PropertyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Property.
   * @param {PropertyCreateArgs} args - Arguments to create a Property.
   * @example
   * // Create one Property
   * const Property = await prisma.property.create({
   *   data: {
   *     // ... data to create a Property
   *   }
   * })
   * 
   */
  create<T extends PropertyCreateArgs>(args: Prisma.SelectSubset<T, PropertyCreateArgs<ExtArgs>>): Prisma.Prisma__PropertyClient<runtime.Types.Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Properties.
   * @param {PropertyCreateManyArgs} args - Arguments to create many Properties.
   * @example
   * // Create many Properties
   * const property = await prisma.property.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PropertyCreateManyArgs>(args?: Prisma.SelectSubset<T, PropertyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Properties and returns the data saved in the database.
   * @param {PropertyCreateManyAndReturnArgs} args - Arguments to create many Properties.
   * @example
   * // Create many Properties
   * const property = await prisma.property.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Properties and only return the `id`
   * const propertyWithIdOnly = await prisma.property.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PropertyCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PropertyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Property.
   * @param {PropertyDeleteArgs} args - Arguments to delete one Property.
   * @example
   * // Delete one Property
   * const Property = await prisma.property.delete({
   *   where: {
   *     // ... filter to delete one Property
   *   }
   * })
   * 
   */
  delete<T extends PropertyDeleteArgs>(args: Prisma.SelectSubset<T, PropertyDeleteArgs<ExtArgs>>): Prisma.Prisma__PropertyClient<runtime.Types.Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Property.
   * @param {PropertyUpdateArgs} args - Arguments to update one Property.
   * @example
   * // Update one Property
   * const property = await prisma.property.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PropertyUpdateArgs>(args: Prisma.SelectSubset<T, PropertyUpdateArgs<ExtArgs>>): Prisma.Prisma__PropertyClient<runtime.Types.Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Properties.
   * @param {PropertyDeleteManyArgs} args - Arguments to filter Properties to delete.
   * @example
   * // Delete a few Properties
   * const { count } = await prisma.property.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PropertyDeleteManyArgs>(args?: Prisma.SelectSubset<T, PropertyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Properties.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PropertyUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Properties
   * const property = await prisma.property.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PropertyUpdateManyArgs>(args: Prisma.SelectSubset<T, PropertyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Properties and returns the data updated in the database.
   * @param {PropertyUpdateManyAndReturnArgs} args - Arguments to update many Properties.
   * @example
   * // Update many Properties
   * const property = await prisma.property.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Properties and only return the `id`
   * const propertyWithIdOnly = await prisma.property.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PropertyUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PropertyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Property.
   * @param {PropertyUpsertArgs} args - Arguments to update or create a Property.
   * @example
   * // Update or create a Property
   * const property = await prisma.property.upsert({
   *   create: {
   *     // ... data to create a Property
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Property we want to update
   *   }
   * })
   */
  upsert<T extends PropertyUpsertArgs>(args: Prisma.SelectSubset<T, PropertyUpsertArgs<ExtArgs>>): Prisma.Prisma__PropertyClient<runtime.Types.Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Properties.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PropertyCountArgs} args - Arguments to filter Properties to count.
   * @example
   * // Count the number of Properties
   * const count = await prisma.property.count({
   *   where: {
   *     // ... the filter for the Properties we want to count
   *   }
   * })
  **/
  count<T extends PropertyCountArgs>(
    args?: Prisma.Subset<T, PropertyCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PropertyCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Property.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PropertyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PropertyAggregateArgs>(args: Prisma.Subset<T, PropertyAggregateArgs>): Prisma.PrismaPromise<GetPropertyAggregateType<T>>

  /**
   * Group by Property.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PropertyGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PropertyGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PropertyGroupByArgs['orderBy'] }
      : { orderBy?: PropertyGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PropertyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPropertyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Property model
 */
readonly fields: PropertyFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Property.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PropertyClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  client<T extends Prisma.ClientDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ClientDefaultArgs<ExtArgs>>): Prisma.Prisma__ClientClient<runtime.Types.Result.GetResult<Prisma.$ClientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  services<T extends Prisma.Property$servicesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Property$servicesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Property model
 */
export interface PropertyFieldRefs {
  readonly id: Prisma.FieldRef<"Property", 'String'>
  readonly cadastralCode: Prisma.FieldRef<"Property", 'String'>
  readonly address: Prisma.FieldRef<"Property", 'String'>
  readonly city: Prisma.FieldRef<"Property", 'String'>
  readonly clientId: Prisma.FieldRef<"Property", 'String'>
  readonly createdAt: Prisma.FieldRef<"Property", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Property", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Property findUnique
 */
export type PropertyFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Property
   */
  select?: Prisma.PropertySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Property
   */
  omit?: Prisma.PropertyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PropertyInclude<ExtArgs> | null
  /**
   * Filter, which Property to fetch.
   */
  where: Prisma.PropertyWhereUniqueInput
}

/**
 * Property findUniqueOrThrow
 */
export type PropertyFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Property
   */
  select?: Prisma.PropertySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Property
   */
  omit?: Prisma.PropertyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PropertyInclude<ExtArgs> | null
  /**
   * Filter, which Property to fetch.
   */
  where: Prisma.PropertyWhereUniqueInput
}

/**
 * Property findFirst
 */
export type PropertyFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Property
   */
  select?: Prisma.PropertySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Property
   */
  omit?: Prisma.PropertyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PropertyInclude<ExtArgs> | null
  /**
   * Filter, which Property to fetch.
   */
  where?: Prisma.PropertyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Properties to fetch.
   */
  orderBy?: Prisma.PropertyOrderByWithRelationInput | Prisma.PropertyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Properties.
   */
  cursor?: Prisma.PropertyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Properties from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Properties.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Properties.
   */
  distinct?: Prisma.PropertyScalarFieldEnum | Prisma.PropertyScalarFieldEnum[]
}

/**
 * Property findFirstOrThrow
 */
export type PropertyFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Property
   */
  select?: Prisma.PropertySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Property
   */
  omit?: Prisma.PropertyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PropertyInclude<ExtArgs> | null
  /**
   * Filter, which Property to fetch.
   */
  where?: Prisma.PropertyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Properties to fetch.
   */
  orderBy?: Prisma.PropertyOrderByWithRelationInput | Prisma.PropertyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Properties.
   */
  cursor?: Prisma.PropertyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Properties from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Properties.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Properties.
   */
  distinct?: Prisma.PropertyScalarFieldEnum | Prisma.PropertyScalarFieldEnum[]
}

/**
 * Property findMany
 */
export type PropertyFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Property
   */
  select?: Prisma.PropertySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Property
   */
  omit?: Prisma.PropertyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PropertyInclude<ExtArgs> | null
  /**
   * Filter, which Properties to fetch.
   */
  where?: Prisma.PropertyWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Properties to fetch.
   */
  orderBy?: Prisma.PropertyOrderByWithRelationInput | Prisma.PropertyOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Properties.
   */
  cursor?: Prisma.PropertyWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Properties from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Properties.
   */
  skip?: number
  distinct?: Prisma.PropertyScalarFieldEnum | Prisma.PropertyScalarFieldEnum[]
}

/**
 * Property create
 */
export type PropertyCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Property
   */
  select?: Prisma.PropertySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Property
   */
  omit?: Prisma.PropertyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PropertyInclude<ExtArgs> | null
  /**
   * The data needed to create a Property.
   */
  data: Prisma.XOR<Prisma.PropertyCreateInput, Prisma.PropertyUncheckedCreateInput>
}

/**
 * Property createMany
 */
export type PropertyCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Properties.
   */
  data: Prisma.PropertyCreateManyInput | Prisma.PropertyCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Property createManyAndReturn
 */
export type PropertyCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Property
   */
  select?: Prisma.PropertySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Property
   */
  omit?: Prisma.PropertyOmit<ExtArgs> | null
  /**
   * The data used to create many Properties.
   */
  data: Prisma.PropertyCreateManyInput | Prisma.PropertyCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PropertyIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Property update
 */
export type PropertyUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Property
   */
  select?: Prisma.PropertySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Property
   */
  omit?: Prisma.PropertyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PropertyInclude<ExtArgs> | null
  /**
   * The data needed to update a Property.
   */
  data: Prisma.XOR<Prisma.PropertyUpdateInput, Prisma.PropertyUncheckedUpdateInput>
  /**
   * Choose, which Property to update.
   */
  where: Prisma.PropertyWhereUniqueInput
}

/**
 * Property updateMany
 */
export type PropertyUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Properties.
   */
  data: Prisma.XOR<Prisma.PropertyUpdateManyMutationInput, Prisma.PropertyUncheckedUpdateManyInput>
  /**
   * Filter which Properties to update
   */
  where?: Prisma.PropertyWhereInput
  /**
   * Limit how many Properties to update.
   */
  limit?: number
}

/**
 * Property updateManyAndReturn
 */
export type PropertyUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Property
   */
  select?: Prisma.PropertySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Property
   */
  omit?: Prisma.PropertyOmit<ExtArgs> | null
  /**
   * The data used to update Properties.
   */
  data: Prisma.XOR<Prisma.PropertyUpdateManyMutationInput, Prisma.PropertyUncheckedUpdateManyInput>
  /**
   * Filter which Properties to update
   */
  where?: Prisma.PropertyWhereInput
  /**
   * Limit how many Properties to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PropertyIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Property upsert
 */
export type PropertyUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Property
   */
  select?: Prisma.PropertySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Property
   */
  omit?: Prisma.PropertyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PropertyInclude<ExtArgs> | null
  /**
   * The filter to search for the Property to update in case it exists.
   */
  where: Prisma.PropertyWhereUniqueInput
  /**
   * In case the Property found by the `where` argument doesn't exist, create a new Property with this data.
   */
  create: Prisma.XOR<Prisma.PropertyCreateInput, Prisma.PropertyUncheckedCreateInput>
  /**
   * In case the Property was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PropertyUpdateInput, Prisma.PropertyUncheckedUpdateInput>
}

/**
 * Property delete
 */
export type PropertyDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Property
   */
  select?: Prisma.PropertySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Property
   */
  omit?: Prisma.PropertyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PropertyInclude<ExtArgs> | null
  /**
   * Filter which Property to delete.
   */
  where: Prisma.PropertyWhereUniqueInput
}

/**
 * Property deleteMany
 */
export type PropertyDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Properties to delete
   */
  where?: Prisma.PropertyWhereInput
  /**
   * Limit how many Properties to delete.
   */
  limit?: number
}

/**
 * Property.services
 */
export type Property$servicesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Service
   */
  select?: Prisma.ServiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Service
   */
  omit?: Prisma.ServiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServiceInclude<ExtArgs> | null
  where?: Prisma.ServiceWhereInput
  orderBy?: Prisma.ServiceOrderByWithRelationInput | Prisma.ServiceOrderByWithRelationInput[]
  cursor?: Prisma.ServiceWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ServiceScalarFieldEnum | Prisma.ServiceScalarFieldEnum[]
}

/**
 * Property without action
 */
export type PropertyDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Property
   */
  select?: Prisma.PropertySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Property
   */
  omit?: Prisma.PropertyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PropertyInclude<ExtArgs> | null
}
