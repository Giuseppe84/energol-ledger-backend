
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ServiceType` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ServiceType
 * 
 */
export type ServiceTypeModel = runtime.Types.Result.DefaultSelection<Prisma.$ServiceTypePayload>

export type AggregateServiceType = {
  _count: ServiceTypeCountAggregateOutputType | null
  _min: ServiceTypeMinAggregateOutputType | null
  _max: ServiceTypeMaxAggregateOutputType | null
}

export type ServiceTypeMinAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ServiceTypeMaxAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ServiceTypeCountAggregateOutputType = {
  id: number
  name: number
  description: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ServiceTypeMinAggregateInputType = {
  id?: true
  name?: true
  description?: true
  createdAt?: true
  updatedAt?: true
}

export type ServiceTypeMaxAggregateInputType = {
  id?: true
  name?: true
  description?: true
  createdAt?: true
  updatedAt?: true
}

export type ServiceTypeCountAggregateInputType = {
  id?: true
  name?: true
  description?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ServiceTypeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ServiceType to aggregate.
   */
  where?: Prisma.ServiceTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ServiceTypes to fetch.
   */
  orderBy?: Prisma.ServiceTypeOrderByWithRelationInput | Prisma.ServiceTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ServiceTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ServiceTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ServiceTypes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ServiceTypes
  **/
  _count?: true | ServiceTypeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ServiceTypeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ServiceTypeMaxAggregateInputType
}

export type GetServiceTypeAggregateType<T extends ServiceTypeAggregateArgs> = {
      [P in keyof T & keyof AggregateServiceType]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateServiceType[P]>
    : Prisma.GetScalarType<T[P], AggregateServiceType[P]>
}




export type ServiceTypeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ServiceTypeWhereInput
  orderBy?: Prisma.ServiceTypeOrderByWithAggregationInput | Prisma.ServiceTypeOrderByWithAggregationInput[]
  by: Prisma.ServiceTypeScalarFieldEnum[] | Prisma.ServiceTypeScalarFieldEnum
  having?: Prisma.ServiceTypeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ServiceTypeCountAggregateInputType | true
  _min?: ServiceTypeMinAggregateInputType
  _max?: ServiceTypeMaxAggregateInputType
}

export type ServiceTypeGroupByOutputType = {
  id: string
  name: string
  description: string | null
  createdAt: Date
  updatedAt: Date
  _count: ServiceTypeCountAggregateOutputType | null
  _min: ServiceTypeMinAggregateOutputType | null
  _max: ServiceTypeMaxAggregateOutputType | null
}

type GetServiceTypeGroupByPayload<T extends ServiceTypeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ServiceTypeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ServiceTypeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ServiceTypeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ServiceTypeGroupByOutputType[P]>
      }
    >
  > 



export type ServiceTypeWhereInput = {
  AND?: Prisma.ServiceTypeWhereInput | Prisma.ServiceTypeWhereInput[]
  OR?: Prisma.ServiceTypeWhereInput[]
  NOT?: Prisma.ServiceTypeWhereInput | Prisma.ServiceTypeWhereInput[]
  id?: Prisma.StringFilter<"ServiceType"> | string
  name?: Prisma.StringFilter<"ServiceType"> | string
  description?: Prisma.StringNullableFilter<"ServiceType"> | string | null
  createdAt?: Prisma.DateTimeFilter<"ServiceType"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ServiceType"> | Date | string
  services?: Prisma.ServiceListRelationFilter
}

export type ServiceTypeOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  services?: Prisma.ServiceOrderByRelationAggregateInput
}

export type ServiceTypeWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  name?: string
  AND?: Prisma.ServiceTypeWhereInput | Prisma.ServiceTypeWhereInput[]
  OR?: Prisma.ServiceTypeWhereInput[]
  NOT?: Prisma.ServiceTypeWhereInput | Prisma.ServiceTypeWhereInput[]
  description?: Prisma.StringNullableFilter<"ServiceType"> | string | null
  createdAt?: Prisma.DateTimeFilter<"ServiceType"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ServiceType"> | Date | string
  services?: Prisma.ServiceListRelationFilter
}, "id" | "name">

export type ServiceTypeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ServiceTypeCountOrderByAggregateInput
  _max?: Prisma.ServiceTypeMaxOrderByAggregateInput
  _min?: Prisma.ServiceTypeMinOrderByAggregateInput
}

export type ServiceTypeScalarWhereWithAggregatesInput = {
  AND?: Prisma.ServiceTypeScalarWhereWithAggregatesInput | Prisma.ServiceTypeScalarWhereWithAggregatesInput[]
  OR?: Prisma.ServiceTypeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ServiceTypeScalarWhereWithAggregatesInput | Prisma.ServiceTypeScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ServiceType"> | string
  name?: Prisma.StringWithAggregatesFilter<"ServiceType"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"ServiceType"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ServiceType"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ServiceType"> | Date | string
}

export type ServiceTypeCreateInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  services?: Prisma.ServiceCreateNestedManyWithoutServiceTypeInput
}

export type ServiceTypeUncheckedCreateInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  services?: Prisma.ServiceUncheckedCreateNestedManyWithoutServiceTypeInput
}

export type ServiceTypeUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  services?: Prisma.ServiceUpdateManyWithoutServiceTypeNestedInput
}

export type ServiceTypeUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  services?: Prisma.ServiceUncheckedUpdateManyWithoutServiceTypeNestedInput
}

export type ServiceTypeCreateManyInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ServiceTypeUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ServiceTypeUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ServiceTypeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ServiceTypeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ServiceTypeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ServiceTypeScalarRelationFilter = {
  is?: Prisma.ServiceTypeWhereInput
  isNot?: Prisma.ServiceTypeWhereInput
}

export type ServiceTypeCreateNestedOneWithoutServicesInput = {
  create?: Prisma.XOR<Prisma.ServiceTypeCreateWithoutServicesInput, Prisma.ServiceTypeUncheckedCreateWithoutServicesInput>
  connectOrCreate?: Prisma.ServiceTypeCreateOrConnectWithoutServicesInput
  connect?: Prisma.ServiceTypeWhereUniqueInput
}

export type ServiceTypeUpdateOneRequiredWithoutServicesNestedInput = {
  create?: Prisma.XOR<Prisma.ServiceTypeCreateWithoutServicesInput, Prisma.ServiceTypeUncheckedCreateWithoutServicesInput>
  connectOrCreate?: Prisma.ServiceTypeCreateOrConnectWithoutServicesInput
  upsert?: Prisma.ServiceTypeUpsertWithoutServicesInput
  connect?: Prisma.ServiceTypeWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ServiceTypeUpdateToOneWithWhereWithoutServicesInput, Prisma.ServiceTypeUpdateWithoutServicesInput>, Prisma.ServiceTypeUncheckedUpdateWithoutServicesInput>
}

export type ServiceTypeCreateWithoutServicesInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ServiceTypeUncheckedCreateWithoutServicesInput = {
  id?: string
  name: string
  description?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ServiceTypeCreateOrConnectWithoutServicesInput = {
  where: Prisma.ServiceTypeWhereUniqueInput
  create: Prisma.XOR<Prisma.ServiceTypeCreateWithoutServicesInput, Prisma.ServiceTypeUncheckedCreateWithoutServicesInput>
}

export type ServiceTypeUpsertWithoutServicesInput = {
  update: Prisma.XOR<Prisma.ServiceTypeUpdateWithoutServicesInput, Prisma.ServiceTypeUncheckedUpdateWithoutServicesInput>
  create: Prisma.XOR<Prisma.ServiceTypeCreateWithoutServicesInput, Prisma.ServiceTypeUncheckedCreateWithoutServicesInput>
  where?: Prisma.ServiceTypeWhereInput
}

export type ServiceTypeUpdateToOneWithWhereWithoutServicesInput = {
  where?: Prisma.ServiceTypeWhereInput
  data: Prisma.XOR<Prisma.ServiceTypeUpdateWithoutServicesInput, Prisma.ServiceTypeUncheckedUpdateWithoutServicesInput>
}

export type ServiceTypeUpdateWithoutServicesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ServiceTypeUncheckedUpdateWithoutServicesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type ServiceTypeCountOutputType
 */

export type ServiceTypeCountOutputType = {
  services: number
}

export type ServiceTypeCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  services?: boolean | ServiceTypeCountOutputTypeCountServicesArgs
}

/**
 * ServiceTypeCountOutputType without action
 */
export type ServiceTypeCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServiceTypeCountOutputType
   */
  select?: Prisma.ServiceTypeCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ServiceTypeCountOutputType without action
 */
export type ServiceTypeCountOutputTypeCountServicesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ServiceWhereInput
}


export type ServiceTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  services?: boolean | Prisma.ServiceType$servicesArgs<ExtArgs>
  _count?: boolean | Prisma.ServiceTypeCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["serviceType"]>

export type ServiceTypeSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["serviceType"]>

export type ServiceTypeSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["serviceType"]>

export type ServiceTypeSelectScalar = {
  id?: boolean
  name?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ServiceTypeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "description" | "createdAt" | "updatedAt", ExtArgs["result"]["serviceType"]>
export type ServiceTypeInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  services?: boolean | Prisma.ServiceType$servicesArgs<ExtArgs>
  _count?: boolean | Prisma.ServiceTypeCountOutputTypeDefaultArgs<ExtArgs>
}
export type ServiceTypeIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type ServiceTypeIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $ServiceTypePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ServiceType"
  objects: {
    services: Prisma.$ServicePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    description: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["serviceType"]>
  composites: {}
}

export type ServiceTypeGetPayload<S extends boolean | null | undefined | ServiceTypeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ServiceTypePayload, S>

export type ServiceTypeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ServiceTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ServiceTypeCountAggregateInputType | true
  }

export interface ServiceTypeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ServiceType'], meta: { name: 'ServiceType' } }
  /**
   * Find zero or one ServiceType that matches the filter.
   * @param {ServiceTypeFindUniqueArgs} args - Arguments to find a ServiceType
   * @example
   * // Get one ServiceType
   * const serviceType = await prisma.serviceType.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ServiceTypeFindUniqueArgs>(args: Prisma.SelectSubset<T, ServiceTypeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ServiceTypeClient<runtime.Types.Result.GetResult<Prisma.$ServiceTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ServiceType that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ServiceTypeFindUniqueOrThrowArgs} args - Arguments to find a ServiceType
   * @example
   * // Get one ServiceType
   * const serviceType = await prisma.serviceType.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ServiceTypeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ServiceTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ServiceTypeClient<runtime.Types.Result.GetResult<Prisma.$ServiceTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ServiceType that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServiceTypeFindFirstArgs} args - Arguments to find a ServiceType
   * @example
   * // Get one ServiceType
   * const serviceType = await prisma.serviceType.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ServiceTypeFindFirstArgs>(args?: Prisma.SelectSubset<T, ServiceTypeFindFirstArgs<ExtArgs>>): Prisma.Prisma__ServiceTypeClient<runtime.Types.Result.GetResult<Prisma.$ServiceTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ServiceType that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServiceTypeFindFirstOrThrowArgs} args - Arguments to find a ServiceType
   * @example
   * // Get one ServiceType
   * const serviceType = await prisma.serviceType.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ServiceTypeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ServiceTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ServiceTypeClient<runtime.Types.Result.GetResult<Prisma.$ServiceTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ServiceTypes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServiceTypeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ServiceTypes
   * const serviceTypes = await prisma.serviceType.findMany()
   * 
   * // Get first 10 ServiceTypes
   * const serviceTypes = await prisma.serviceType.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const serviceTypeWithIdOnly = await prisma.serviceType.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ServiceTypeFindManyArgs>(args?: Prisma.SelectSubset<T, ServiceTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ServiceTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ServiceType.
   * @param {ServiceTypeCreateArgs} args - Arguments to create a ServiceType.
   * @example
   * // Create one ServiceType
   * const ServiceType = await prisma.serviceType.create({
   *   data: {
   *     // ... data to create a ServiceType
   *   }
   * })
   * 
   */
  create<T extends ServiceTypeCreateArgs>(args: Prisma.SelectSubset<T, ServiceTypeCreateArgs<ExtArgs>>): Prisma.Prisma__ServiceTypeClient<runtime.Types.Result.GetResult<Prisma.$ServiceTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ServiceTypes.
   * @param {ServiceTypeCreateManyArgs} args - Arguments to create many ServiceTypes.
   * @example
   * // Create many ServiceTypes
   * const serviceType = await prisma.serviceType.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ServiceTypeCreateManyArgs>(args?: Prisma.SelectSubset<T, ServiceTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ServiceTypes and returns the data saved in the database.
   * @param {ServiceTypeCreateManyAndReturnArgs} args - Arguments to create many ServiceTypes.
   * @example
   * // Create many ServiceTypes
   * const serviceType = await prisma.serviceType.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ServiceTypes and only return the `id`
   * const serviceTypeWithIdOnly = await prisma.serviceType.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ServiceTypeCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ServiceTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ServiceTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ServiceType.
   * @param {ServiceTypeDeleteArgs} args - Arguments to delete one ServiceType.
   * @example
   * // Delete one ServiceType
   * const ServiceType = await prisma.serviceType.delete({
   *   where: {
   *     // ... filter to delete one ServiceType
   *   }
   * })
   * 
   */
  delete<T extends ServiceTypeDeleteArgs>(args: Prisma.SelectSubset<T, ServiceTypeDeleteArgs<ExtArgs>>): Prisma.Prisma__ServiceTypeClient<runtime.Types.Result.GetResult<Prisma.$ServiceTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ServiceType.
   * @param {ServiceTypeUpdateArgs} args - Arguments to update one ServiceType.
   * @example
   * // Update one ServiceType
   * const serviceType = await prisma.serviceType.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ServiceTypeUpdateArgs>(args: Prisma.SelectSubset<T, ServiceTypeUpdateArgs<ExtArgs>>): Prisma.Prisma__ServiceTypeClient<runtime.Types.Result.GetResult<Prisma.$ServiceTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ServiceTypes.
   * @param {ServiceTypeDeleteManyArgs} args - Arguments to filter ServiceTypes to delete.
   * @example
   * // Delete a few ServiceTypes
   * const { count } = await prisma.serviceType.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ServiceTypeDeleteManyArgs>(args?: Prisma.SelectSubset<T, ServiceTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ServiceTypes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServiceTypeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ServiceTypes
   * const serviceType = await prisma.serviceType.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ServiceTypeUpdateManyArgs>(args: Prisma.SelectSubset<T, ServiceTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ServiceTypes and returns the data updated in the database.
   * @param {ServiceTypeUpdateManyAndReturnArgs} args - Arguments to update many ServiceTypes.
   * @example
   * // Update many ServiceTypes
   * const serviceType = await prisma.serviceType.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ServiceTypes and only return the `id`
   * const serviceTypeWithIdOnly = await prisma.serviceType.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ServiceTypeUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ServiceTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ServiceTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ServiceType.
   * @param {ServiceTypeUpsertArgs} args - Arguments to update or create a ServiceType.
   * @example
   * // Update or create a ServiceType
   * const serviceType = await prisma.serviceType.upsert({
   *   create: {
   *     // ... data to create a ServiceType
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ServiceType we want to update
   *   }
   * })
   */
  upsert<T extends ServiceTypeUpsertArgs>(args: Prisma.SelectSubset<T, ServiceTypeUpsertArgs<ExtArgs>>): Prisma.Prisma__ServiceTypeClient<runtime.Types.Result.GetResult<Prisma.$ServiceTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ServiceTypes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServiceTypeCountArgs} args - Arguments to filter ServiceTypes to count.
   * @example
   * // Count the number of ServiceTypes
   * const count = await prisma.serviceType.count({
   *   where: {
   *     // ... the filter for the ServiceTypes we want to count
   *   }
   * })
  **/
  count<T extends ServiceTypeCountArgs>(
    args?: Prisma.Subset<T, ServiceTypeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ServiceTypeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ServiceType.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServiceTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ServiceTypeAggregateArgs>(args: Prisma.Subset<T, ServiceTypeAggregateArgs>): Prisma.PrismaPromise<GetServiceTypeAggregateType<T>>

  /**
   * Group by ServiceType.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServiceTypeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ServiceTypeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ServiceTypeGroupByArgs['orderBy'] }
      : { orderBy?: ServiceTypeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ServiceTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ServiceType model
 */
readonly fields: ServiceTypeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ServiceType.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ServiceTypeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  services<T extends Prisma.ServiceType$servicesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ServiceType$servicesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ServiceType model
 */
export interface ServiceTypeFieldRefs {
  readonly id: Prisma.FieldRef<"ServiceType", 'String'>
  readonly name: Prisma.FieldRef<"ServiceType", 'String'>
  readonly description: Prisma.FieldRef<"ServiceType", 'String'>
  readonly createdAt: Prisma.FieldRef<"ServiceType", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ServiceType", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ServiceType findUnique
 */
export type ServiceTypeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServiceType
   */
  select?: Prisma.ServiceTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServiceType
   */
  omit?: Prisma.ServiceTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServiceTypeInclude<ExtArgs> | null
  /**
   * Filter, which ServiceType to fetch.
   */
  where: Prisma.ServiceTypeWhereUniqueInput
}

/**
 * ServiceType findUniqueOrThrow
 */
export type ServiceTypeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServiceType
   */
  select?: Prisma.ServiceTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServiceType
   */
  omit?: Prisma.ServiceTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServiceTypeInclude<ExtArgs> | null
  /**
   * Filter, which ServiceType to fetch.
   */
  where: Prisma.ServiceTypeWhereUniqueInput
}

/**
 * ServiceType findFirst
 */
export type ServiceTypeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServiceType
   */
  select?: Prisma.ServiceTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServiceType
   */
  omit?: Prisma.ServiceTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServiceTypeInclude<ExtArgs> | null
  /**
   * Filter, which ServiceType to fetch.
   */
  where?: Prisma.ServiceTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ServiceTypes to fetch.
   */
  orderBy?: Prisma.ServiceTypeOrderByWithRelationInput | Prisma.ServiceTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ServiceTypes.
   */
  cursor?: Prisma.ServiceTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ServiceTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ServiceTypes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ServiceTypes.
   */
  distinct?: Prisma.ServiceTypeScalarFieldEnum | Prisma.ServiceTypeScalarFieldEnum[]
}

/**
 * ServiceType findFirstOrThrow
 */
export type ServiceTypeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServiceType
   */
  select?: Prisma.ServiceTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServiceType
   */
  omit?: Prisma.ServiceTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServiceTypeInclude<ExtArgs> | null
  /**
   * Filter, which ServiceType to fetch.
   */
  where?: Prisma.ServiceTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ServiceTypes to fetch.
   */
  orderBy?: Prisma.ServiceTypeOrderByWithRelationInput | Prisma.ServiceTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ServiceTypes.
   */
  cursor?: Prisma.ServiceTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ServiceTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ServiceTypes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ServiceTypes.
   */
  distinct?: Prisma.ServiceTypeScalarFieldEnum | Prisma.ServiceTypeScalarFieldEnum[]
}

/**
 * ServiceType findMany
 */
export type ServiceTypeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServiceType
   */
  select?: Prisma.ServiceTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServiceType
   */
  omit?: Prisma.ServiceTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServiceTypeInclude<ExtArgs> | null
  /**
   * Filter, which ServiceTypes to fetch.
   */
  where?: Prisma.ServiceTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ServiceTypes to fetch.
   */
  orderBy?: Prisma.ServiceTypeOrderByWithRelationInput | Prisma.ServiceTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ServiceTypes.
   */
  cursor?: Prisma.ServiceTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ServiceTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ServiceTypes.
   */
  skip?: number
  distinct?: Prisma.ServiceTypeScalarFieldEnum | Prisma.ServiceTypeScalarFieldEnum[]
}

/**
 * ServiceType create
 */
export type ServiceTypeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServiceType
   */
  select?: Prisma.ServiceTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServiceType
   */
  omit?: Prisma.ServiceTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServiceTypeInclude<ExtArgs> | null
  /**
   * The data needed to create a ServiceType.
   */
  data: Prisma.XOR<Prisma.ServiceTypeCreateInput, Prisma.ServiceTypeUncheckedCreateInput>
}

/**
 * ServiceType createMany
 */
export type ServiceTypeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ServiceTypes.
   */
  data: Prisma.ServiceTypeCreateManyInput | Prisma.ServiceTypeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ServiceType createManyAndReturn
 */
export type ServiceTypeCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServiceType
   */
  select?: Prisma.ServiceTypeSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ServiceType
   */
  omit?: Prisma.ServiceTypeOmit<ExtArgs> | null
  /**
   * The data used to create many ServiceTypes.
   */
  data: Prisma.ServiceTypeCreateManyInput | Prisma.ServiceTypeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ServiceType update
 */
export type ServiceTypeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServiceType
   */
  select?: Prisma.ServiceTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServiceType
   */
  omit?: Prisma.ServiceTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServiceTypeInclude<ExtArgs> | null
  /**
   * The data needed to update a ServiceType.
   */
  data: Prisma.XOR<Prisma.ServiceTypeUpdateInput, Prisma.ServiceTypeUncheckedUpdateInput>
  /**
   * Choose, which ServiceType to update.
   */
  where: Prisma.ServiceTypeWhereUniqueInput
}

/**
 * ServiceType updateMany
 */
export type ServiceTypeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ServiceTypes.
   */
  data: Prisma.XOR<Prisma.ServiceTypeUpdateManyMutationInput, Prisma.ServiceTypeUncheckedUpdateManyInput>
  /**
   * Filter which ServiceTypes to update
   */
  where?: Prisma.ServiceTypeWhereInput
  /**
   * Limit how many ServiceTypes to update.
   */
  limit?: number
}

/**
 * ServiceType updateManyAndReturn
 */
export type ServiceTypeUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServiceType
   */
  select?: Prisma.ServiceTypeSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ServiceType
   */
  omit?: Prisma.ServiceTypeOmit<ExtArgs> | null
  /**
   * The data used to update ServiceTypes.
   */
  data: Prisma.XOR<Prisma.ServiceTypeUpdateManyMutationInput, Prisma.ServiceTypeUncheckedUpdateManyInput>
  /**
   * Filter which ServiceTypes to update
   */
  where?: Prisma.ServiceTypeWhereInput
  /**
   * Limit how many ServiceTypes to update.
   */
  limit?: number
}

/**
 * ServiceType upsert
 */
export type ServiceTypeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServiceType
   */
  select?: Prisma.ServiceTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServiceType
   */
  omit?: Prisma.ServiceTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServiceTypeInclude<ExtArgs> | null
  /**
   * The filter to search for the ServiceType to update in case it exists.
   */
  where: Prisma.ServiceTypeWhereUniqueInput
  /**
   * In case the ServiceType found by the `where` argument doesn't exist, create a new ServiceType with this data.
   */
  create: Prisma.XOR<Prisma.ServiceTypeCreateInput, Prisma.ServiceTypeUncheckedCreateInput>
  /**
   * In case the ServiceType was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ServiceTypeUpdateInput, Prisma.ServiceTypeUncheckedUpdateInput>
}

/**
 * ServiceType delete
 */
export type ServiceTypeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServiceType
   */
  select?: Prisma.ServiceTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServiceType
   */
  omit?: Prisma.ServiceTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServiceTypeInclude<ExtArgs> | null
  /**
   * Filter which ServiceType to delete.
   */
  where: Prisma.ServiceTypeWhereUniqueInput
}

/**
 * ServiceType deleteMany
 */
export type ServiceTypeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ServiceTypes to delete
   */
  where?: Prisma.ServiceTypeWhereInput
  /**
   * Limit how many ServiceTypes to delete.
   */
  limit?: number
}

/**
 * ServiceType.services
 */
export type ServiceType$servicesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Service
   */
  select?: Prisma.ServiceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Service
   */
  omit?: Prisma.ServiceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServiceInclude<ExtArgs> | null
  where?: Prisma.ServiceWhereInput
  orderBy?: Prisma.ServiceOrderByWithRelationInput | Prisma.ServiceOrderByWithRelationInput[]
  cursor?: Prisma.ServiceWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ServiceScalarFieldEnum | Prisma.ServiceScalarFieldEnum[]
}

/**
 * ServiceType without action
 */
export type ServiceTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServiceType
   */
  select?: Prisma.ServiceTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ServiceType
   */
  omit?: Prisma.ServiceTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServiceTypeInclude<ExtArgs> | null
}
